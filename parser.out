Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instruction instructions
Rule 3     instruction -> block
Rule 4     instruction -> conditional
Rule 5     instruction -> loop
Rule 6     instruction -> statement ;
Rule 7     instruction -> error ;
Rule 8     block -> { instructions }
Rule 9     block -> { error }
Rule 10    conditional -> IF ( expression ) instruction
Rule 11    conditional -> IF ( expression ) instruction ELSE instruction
Rule 12    loop -> while
Rule 13    loop -> for
Rule 14    while -> WHILE ( expression ) instruction
Rule 15    for -> FOR ID = numeric_expression : numeric_expression instruction
Rule 16    statement -> assignment
Rule 17    statement -> flow_keyword
Rule 18    statement -> return
Rule 19    statement -> print
Rule 20    flow_keyword -> BREAK
Rule 21    flow_keyword -> CONTINUE
Rule 22    return -> RETURN expression
Rule 23    return -> RETURN
Rule 24    print -> PRINT print_body
Rule 25    print_body -> expression , print_body
Rule 26    print_body -> expression
Rule 27    string -> STRING
Rule 28    assignment_var -> var
Rule 29    assignment_var -> array_range
Rule 30    assignment -> assignment_var assignment_operand expression
Rule 31    assignment -> assignment_var = string
Rule 32    assignment_operand -> =
Rule 33    assignment_operand -> ADDASSIGN
Rule 34    assignment_operand -> SUBASSIGN
Rule 35    assignment_operand -> MULASSIGN
Rule 36    assignment_operand -> DIVASSIGN
Rule 37    var -> ID
Rule 38    var -> var [ vector_body ]
Rule 39    number -> INTNUM
Rule 40    number -> FLOATNUM
Rule 41    number -> var
Rule 42    array_range -> var [ numeric_expression , numeric_expression ]
Rule 43    expression -> numeric_expression
Rule 44    expression -> comparison_expression
Rule 45    numeric_expression -> number
Rule 46    numeric_expression -> matrix
Rule 47    numeric_expression -> vector
Rule 48    numeric_expression -> string
Rule 49    numeric_expression -> unary_operation
Rule 50    numeric_expression -> function
Rule 51    numeric_expression -> ( numeric_expression )
Rule 52    numeric_expression -> numeric_expression + numeric_expression
Rule 53    numeric_expression -> numeric_expression - numeric_expression
Rule 54    numeric_expression -> numeric_expression * numeric_expression
Rule 55    numeric_expression -> numeric_expression / numeric_expression
Rule 56    numeric_expression -> numeric_expression DOTADD numeric_expression
Rule 57    numeric_expression -> numeric_expression DOTSUB numeric_expression
Rule 58    numeric_expression -> numeric_expression DOTMUL numeric_expression
Rule 59    numeric_expression -> numeric_expression DOTDIV numeric_expression
Rule 60    vector -> [ vector_body ]
Rule 61    vector -> [ ]
Rule 62    vector_body -> numeric_expression
Rule 63    vector_body -> vector_body , numeric_expression
Rule 64    matrix -> [ matrix_body ]
Rule 65    matrix_body -> vector_body
Rule 66    matrix_body -> matrix_body ; vector_body
Rule 67    unary_operation -> negation
Rule 68    unary_operation -> transposition
Rule 69    negation -> - numeric_expression
Rule 70    transposition -> numeric_expression '
Rule 71    function -> function_name ( vector_body )
Rule 72    function -> function_name ( error )
Rule 73    function_name -> EYE
Rule 74    function_name -> ZEROS
Rule 75    function_name -> ONES
Rule 76    comparison_expression -> numeric_expression < numeric_expression
Rule 77    comparison_expression -> numeric_expression > numeric_expression
Rule 78    comparison_expression -> numeric_expression EQUAL numeric_expression
Rule 79    comparison_expression -> numeric_expression NOTEQUAL numeric_expression
Rule 80    comparison_expression -> numeric_expression LE numeric_expression
Rule 81    comparison_expression -> numeric_expression GE numeric_expression
Rule 82    comparison_expression -> ( comparison_expression )

Terminals, with rules where they appear

'                    : 70
(                    : 10 11 14 51 71 72 82
)                    : 10 11 14 51 71 72 82
*                    : 54
+                    : 52
,                    : 25 42 63
-                    : 53 69
/                    : 55
:                    : 15
;                    : 6 7 66
<                    : 76
=                    : 15 31 32
>                    : 77
ADDASSIGN            : 33
BREAK                : 20
CONTINUE             : 21
DIVASSIGN            : 36
DOTADD               : 56
DOTDIV               : 59
DOTMUL               : 58
DOTSUB               : 57
ELSE                 : 11
EQUAL                : 78
EYE                  : 73
FLOATNUM             : 40
FOR                  : 15
GE                   : 81
ID                   : 15 37
IF                   : 10 11
INTNUM               : 39
LE                   : 80
MULASSIGN            : 35
NOTEQUAL             : 79
ONES                 : 75
PRINT                : 24
RETURN               : 22 23
STRING               : 27
SUBASSIGN            : 34
WHILE                : 14
ZEROS                : 74
[                    : 38 42 60 61 64
]                    : 38 42 60 61 64
error                : 7 9 72
{                    : 8 9
}                    : 8 9

Nonterminals, with rules where they appear

array_range          : 29
assignment           : 16
assignment_operand   : 30
assignment_var       : 30 31
block                : 3
comparison_expression : 44 82
conditional          : 4
expression           : 10 11 14 22 25 26 30
flow_keyword         : 17
for                  : 13
function             : 50
function_name        : 71 72
instruction          : 1 2 10 11 11 14 15
instructions         : 2 8 0
loop                 : 5
matrix               : 46
matrix_body          : 64 66
negation             : 67
number               : 45
numeric_expression   : 15 15 42 42 43 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 62 63 69 70 76 76 77 77 78 78 79 79 80 80 81 81
print                : 19
print_body           : 24 25
return               : 18
statement            : 6
string               : 31 48
transposition        : 68
unary_operation      : 49
var                  : 28 38 41 42
vector               : 47
vector_body          : 38 60 63 65 66 71
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 1

    (0) S' -> instructions .



state 2

    (1) instructions -> instruction .
    (2) instructions -> instruction . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)
    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 2
    instructions                   shift and go to state 26
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 3

    (3) instruction -> block .

    error           reduce using rule 3 (instruction -> block .)
    {               reduce using rule 3 (instruction -> block .)
    IF              reduce using rule 3 (instruction -> block .)
    WHILE           reduce using rule 3 (instruction -> block .)
    FOR             reduce using rule 3 (instruction -> block .)
    BREAK           reduce using rule 3 (instruction -> block .)
    CONTINUE        reduce using rule 3 (instruction -> block .)
    RETURN          reduce using rule 3 (instruction -> block .)
    PRINT           reduce using rule 3 (instruction -> block .)
    ID              reduce using rule 3 (instruction -> block .)
    $end            reduce using rule 3 (instruction -> block .)
    }               reduce using rule 3 (instruction -> block .)
    ELSE            reduce using rule 3 (instruction -> block .)


state 4

    (4) instruction -> conditional .

    error           reduce using rule 4 (instruction -> conditional .)
    {               reduce using rule 4 (instruction -> conditional .)
    IF              reduce using rule 4 (instruction -> conditional .)
    WHILE           reduce using rule 4 (instruction -> conditional .)
    FOR             reduce using rule 4 (instruction -> conditional .)
    BREAK           reduce using rule 4 (instruction -> conditional .)
    CONTINUE        reduce using rule 4 (instruction -> conditional .)
    RETURN          reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 4 (instruction -> conditional .)
    ID              reduce using rule 4 (instruction -> conditional .)
    $end            reduce using rule 4 (instruction -> conditional .)
    }               reduce using rule 4 (instruction -> conditional .)
    ELSE            reduce using rule 4 (instruction -> conditional .)


state 5

    (5) instruction -> loop .

    error           reduce using rule 5 (instruction -> loop .)
    {               reduce using rule 5 (instruction -> loop .)
    IF              reduce using rule 5 (instruction -> loop .)
    WHILE           reduce using rule 5 (instruction -> loop .)
    FOR             reduce using rule 5 (instruction -> loop .)
    BREAK           reduce using rule 5 (instruction -> loop .)
    CONTINUE        reduce using rule 5 (instruction -> loop .)
    RETURN          reduce using rule 5 (instruction -> loop .)
    PRINT           reduce using rule 5 (instruction -> loop .)
    ID              reduce using rule 5 (instruction -> loop .)
    $end            reduce using rule 5 (instruction -> loop .)
    }               reduce using rule 5 (instruction -> loop .)
    ELSE            reduce using rule 5 (instruction -> loop .)


state 6

    (6) instruction -> statement . ;

    ;               shift and go to state 27


state 7

    (7) instruction -> error . ;

    ;               shift and go to state 28


state 8

    (8) block -> { . instructions }
    (9) block -> { . error }
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    error           shift and go to state 30
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instructions                   shift and go to state 29
    instruction                    shift and go to state 2
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 9

    (10) conditional -> IF . ( expression ) instruction
    (11) conditional -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 31


state 10

    (12) loop -> while .

    error           reduce using rule 12 (loop -> while .)
    {               reduce using rule 12 (loop -> while .)
    IF              reduce using rule 12 (loop -> while .)
    WHILE           reduce using rule 12 (loop -> while .)
    FOR             reduce using rule 12 (loop -> while .)
    BREAK           reduce using rule 12 (loop -> while .)
    CONTINUE        reduce using rule 12 (loop -> while .)
    RETURN          reduce using rule 12 (loop -> while .)
    PRINT           reduce using rule 12 (loop -> while .)
    ID              reduce using rule 12 (loop -> while .)
    $end            reduce using rule 12 (loop -> while .)
    }               reduce using rule 12 (loop -> while .)
    ELSE            reduce using rule 12 (loop -> while .)


state 11

    (13) loop -> for .

    error           reduce using rule 13 (loop -> for .)
    {               reduce using rule 13 (loop -> for .)
    IF              reduce using rule 13 (loop -> for .)
    WHILE           reduce using rule 13 (loop -> for .)
    FOR             reduce using rule 13 (loop -> for .)
    BREAK           reduce using rule 13 (loop -> for .)
    CONTINUE        reduce using rule 13 (loop -> for .)
    RETURN          reduce using rule 13 (loop -> for .)
    PRINT           reduce using rule 13 (loop -> for .)
    ID              reduce using rule 13 (loop -> for .)
    $end            reduce using rule 13 (loop -> for .)
    }               reduce using rule 13 (loop -> for .)
    ELSE            reduce using rule 13 (loop -> for .)


state 12

    (16) statement -> assignment .

    ;               reduce using rule 16 (statement -> assignment .)


state 13

    (17) statement -> flow_keyword .

    ;               reduce using rule 17 (statement -> flow_keyword .)


state 14

    (18) statement -> return .

    ;               reduce using rule 18 (statement -> return .)


state 15

    (19) statement -> print .

    ;               reduce using rule 19 (statement -> print .)


state 16

    (14) while -> WHILE . ( expression ) instruction

    (               shift and go to state 32


state 17

    (15) for -> FOR . ID = numeric_expression : numeric_expression instruction

    ID              shift and go to state 33


state 18

    (37) var -> ID .

    [               reduce using rule 37 (var -> ID .)
    =               reduce using rule 37 (var -> ID .)
    ADDASSIGN       reduce using rule 37 (var -> ID .)
    SUBASSIGN       reduce using rule 37 (var -> ID .)
    MULASSIGN       reduce using rule 37 (var -> ID .)
    DIVASSIGN       reduce using rule 37 (var -> ID .)
    +               reduce using rule 37 (var -> ID .)
    -               reduce using rule 37 (var -> ID .)
    *               reduce using rule 37 (var -> ID .)
    /               reduce using rule 37 (var -> ID .)
    DOTADD          reduce using rule 37 (var -> ID .)
    DOTSUB          reduce using rule 37 (var -> ID .)
    DOTMUL          reduce using rule 37 (var -> ID .)
    DOTDIV          reduce using rule 37 (var -> ID .)
    <               reduce using rule 37 (var -> ID .)
    >               reduce using rule 37 (var -> ID .)
    EQUAL           reduce using rule 37 (var -> ID .)
    NOTEQUAL        reduce using rule 37 (var -> ID .)
    LE              reduce using rule 37 (var -> ID .)
    GE              reduce using rule 37 (var -> ID .)
    '               reduce using rule 37 (var -> ID .)
    ;               reduce using rule 37 (var -> ID .)
    ,               reduce using rule 37 (var -> ID .)
    )               reduce using rule 37 (var -> ID .)
    ]               reduce using rule 37 (var -> ID .)
    :               reduce using rule 37 (var -> ID .)
    error           reduce using rule 37 (var -> ID .)
    {               reduce using rule 37 (var -> ID .)
    IF              reduce using rule 37 (var -> ID .)
    WHILE           reduce using rule 37 (var -> ID .)
    FOR             reduce using rule 37 (var -> ID .)
    BREAK           reduce using rule 37 (var -> ID .)
    CONTINUE        reduce using rule 37 (var -> ID .)
    RETURN          reduce using rule 37 (var -> ID .)
    PRINT           reduce using rule 37 (var -> ID .)
    ID              reduce using rule 37 (var -> ID .)


state 19

    (30) assignment -> assignment_var . assignment_operand expression
    (31) assignment -> assignment_var . = string
    (32) assignment_operand -> . =
    (33) assignment_operand -> . ADDASSIGN
    (34) assignment_operand -> . SUBASSIGN
    (35) assignment_operand -> . MULASSIGN
    (36) assignment_operand -> . DIVASSIGN

    =               shift and go to state 35
    ADDASSIGN       shift and go to state 36
    SUBASSIGN       shift and go to state 37
    MULASSIGN       shift and go to state 38
    DIVASSIGN       shift and go to state 39

    assignment_operand             shift and go to state 34

state 20

    (20) flow_keyword -> BREAK .

    ;               reduce using rule 20 (flow_keyword -> BREAK .)


state 21

    (21) flow_keyword -> CONTINUE .

    ;               reduce using rule 21 (flow_keyword -> CONTINUE .)


state 22

    (22) return -> RETURN . expression
    (23) return -> RETURN .
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    ;               reduce using rule 23 (return -> RETURN .)
    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    expression                     shift and go to state 40
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 23

    (24) print -> PRINT . print_body
    (25) print_body -> . expression , print_body
    (26) print_body -> . expression
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    print_body                     shift and go to state 62
    expression                     shift and go to state 63
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 24

    (28) assignment_var -> var .
    (38) var -> var . [ vector_body ]
    (42) array_range -> var . [ numeric_expression , numeric_expression ]

    =               reduce using rule 28 (assignment_var -> var .)
    ADDASSIGN       reduce using rule 28 (assignment_var -> var .)
    SUBASSIGN       reduce using rule 28 (assignment_var -> var .)
    MULASSIGN       reduce using rule 28 (assignment_var -> var .)
    DIVASSIGN       reduce using rule 28 (assignment_var -> var .)
    [               shift and go to state 64


state 25

    (29) assignment_var -> array_range .

    =               reduce using rule 29 (assignment_var -> array_range .)
    ADDASSIGN       reduce using rule 29 (assignment_var -> array_range .)
    SUBASSIGN       reduce using rule 29 (assignment_var -> array_range .)
    MULASSIGN       reduce using rule 29 (assignment_var -> array_range .)
    DIVASSIGN       reduce using rule 29 (assignment_var -> array_range .)


state 26

    (2) instructions -> instruction instructions .

    $end            reduce using rule 2 (instructions -> instruction instructions .)
    }               reduce using rule 2 (instructions -> instruction instructions .)


state 27

    (6) instruction -> statement ; .

    error           reduce using rule 6 (instruction -> statement ; .)
    {               reduce using rule 6 (instruction -> statement ; .)
    IF              reduce using rule 6 (instruction -> statement ; .)
    WHILE           reduce using rule 6 (instruction -> statement ; .)
    FOR             reduce using rule 6 (instruction -> statement ; .)
    BREAK           reduce using rule 6 (instruction -> statement ; .)
    CONTINUE        reduce using rule 6 (instruction -> statement ; .)
    RETURN          reduce using rule 6 (instruction -> statement ; .)
    PRINT           reduce using rule 6 (instruction -> statement ; .)
    ID              reduce using rule 6 (instruction -> statement ; .)
    $end            reduce using rule 6 (instruction -> statement ; .)
    }               reduce using rule 6 (instruction -> statement ; .)
    ELSE            reduce using rule 6 (instruction -> statement ; .)


state 28

    (7) instruction -> error ; .

    error           reduce using rule 7 (instruction -> error ; .)
    {               reduce using rule 7 (instruction -> error ; .)
    IF              reduce using rule 7 (instruction -> error ; .)
    WHILE           reduce using rule 7 (instruction -> error ; .)
    FOR             reduce using rule 7 (instruction -> error ; .)
    BREAK           reduce using rule 7 (instruction -> error ; .)
    CONTINUE        reduce using rule 7 (instruction -> error ; .)
    RETURN          reduce using rule 7 (instruction -> error ; .)
    PRINT           reduce using rule 7 (instruction -> error ; .)
    ID              reduce using rule 7 (instruction -> error ; .)
    $end            reduce using rule 7 (instruction -> error ; .)
    }               reduce using rule 7 (instruction -> error ; .)
    ELSE            reduce using rule 7 (instruction -> error ; .)


state 29

    (8) block -> { instructions . }

    }               shift and go to state 65


state 30

    (9) block -> { error . }
    (7) instruction -> error . ;

    }               shift and go to state 66
    ;               shift and go to state 28


state 31

    (10) conditional -> IF ( . expression ) instruction
    (11) conditional -> IF ( . expression ) instruction ELSE instruction
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    expression                     shift and go to state 67
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 32

    (14) while -> WHILE ( . expression ) instruction
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    expression                     shift and go to state 68
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 33

    (15) for -> FOR ID . = numeric_expression : numeric_expression instruction

    =               shift and go to state 69


state 34

    (30) assignment -> assignment_var assignment_operand . expression
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    expression                     shift and go to state 70
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 35

    (31) assignment -> assignment_var = . string
    (32) assignment_operand -> = .
    (27) string -> . STRING

    (               reduce using rule 32 (assignment_operand -> = .)
    INTNUM          reduce using rule 32 (assignment_operand -> = .)
    FLOATNUM        reduce using rule 32 (assignment_operand -> = .)
    [               reduce using rule 32 (assignment_operand -> = .)
    STRING          reduce using rule 32 (assignment_operand -> = .)
    ID              reduce using rule 32 (assignment_operand -> = .)
    -               reduce using rule 32 (assignment_operand -> = .)
    EYE             reduce using rule 32 (assignment_operand -> = .)
    ZEROS           reduce using rule 32 (assignment_operand -> = .)
    ONES            reduce using rule 32 (assignment_operand -> = .)

  ! STRING          [ shift and go to state 55 ]

    string                         shift and go to state 71

state 36

    (33) assignment_operand -> ADDASSIGN .

    (               reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    INTNUM          reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    FLOATNUM        reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    [               reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    STRING          reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    ID              reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    -               reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    EYE             reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    ZEROS           reduce using rule 33 (assignment_operand -> ADDASSIGN .)
    ONES            reduce using rule 33 (assignment_operand -> ADDASSIGN .)


state 37

    (34) assignment_operand -> SUBASSIGN .

    (               reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    INTNUM          reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    FLOATNUM        reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    [               reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    STRING          reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    ID              reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    -               reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    EYE             reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    ZEROS           reduce using rule 34 (assignment_operand -> SUBASSIGN .)
    ONES            reduce using rule 34 (assignment_operand -> SUBASSIGN .)


state 38

    (35) assignment_operand -> MULASSIGN .

    (               reduce using rule 35 (assignment_operand -> MULASSIGN .)
    INTNUM          reduce using rule 35 (assignment_operand -> MULASSIGN .)
    FLOATNUM        reduce using rule 35 (assignment_operand -> MULASSIGN .)
    [               reduce using rule 35 (assignment_operand -> MULASSIGN .)
    STRING          reduce using rule 35 (assignment_operand -> MULASSIGN .)
    ID              reduce using rule 35 (assignment_operand -> MULASSIGN .)
    -               reduce using rule 35 (assignment_operand -> MULASSIGN .)
    EYE             reduce using rule 35 (assignment_operand -> MULASSIGN .)
    ZEROS           reduce using rule 35 (assignment_operand -> MULASSIGN .)
    ONES            reduce using rule 35 (assignment_operand -> MULASSIGN .)


state 39

    (36) assignment_operand -> DIVASSIGN .

    (               reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    INTNUM          reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    FLOATNUM        reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    [               reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    STRING          reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    ID              reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    -               reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    EYE             reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    ZEROS           reduce using rule 36 (assignment_operand -> DIVASSIGN .)
    ONES            reduce using rule 36 (assignment_operand -> DIVASSIGN .)


state 40

    (22) return -> RETURN expression .

    ;               reduce using rule 22 (return -> RETURN expression .)


state 41

    (43) expression -> numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (76) comparison_expression -> numeric_expression . < numeric_expression
    (77) comparison_expression -> numeric_expression . > numeric_expression
    (78) comparison_expression -> numeric_expression . EQUAL numeric_expression
    (79) comparison_expression -> numeric_expression . NOTEQUAL numeric_expression
    (80) comparison_expression -> numeric_expression . LE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 43 (expression -> numeric_expression .)
    ,               reduce using rule 43 (expression -> numeric_expression .)
    )               reduce using rule 43 (expression -> numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    EQUAL           shift and go to state 82
    NOTEQUAL        shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    '               shift and go to state 86


state 42

    (44) expression -> comparison_expression .

    ;               reduce using rule 44 (expression -> comparison_expression .)
    ,               reduce using rule 44 (expression -> comparison_expression .)
    )               reduce using rule 44 (expression -> comparison_expression .)


state 43

    (45) numeric_expression -> number .

    +               reduce using rule 45 (numeric_expression -> number .)
    -               reduce using rule 45 (numeric_expression -> number .)
    *               reduce using rule 45 (numeric_expression -> number .)
    /               reduce using rule 45 (numeric_expression -> number .)
    DOTADD          reduce using rule 45 (numeric_expression -> number .)
    DOTSUB          reduce using rule 45 (numeric_expression -> number .)
    DOTMUL          reduce using rule 45 (numeric_expression -> number .)
    DOTDIV          reduce using rule 45 (numeric_expression -> number .)
    <               reduce using rule 45 (numeric_expression -> number .)
    >               reduce using rule 45 (numeric_expression -> number .)
    EQUAL           reduce using rule 45 (numeric_expression -> number .)
    NOTEQUAL        reduce using rule 45 (numeric_expression -> number .)
    LE              reduce using rule 45 (numeric_expression -> number .)
    GE              reduce using rule 45 (numeric_expression -> number .)
    '               reduce using rule 45 (numeric_expression -> number .)
    ;               reduce using rule 45 (numeric_expression -> number .)
    ,               reduce using rule 45 (numeric_expression -> number .)
    )               reduce using rule 45 (numeric_expression -> number .)
    ]               reduce using rule 45 (numeric_expression -> number .)
    :               reduce using rule 45 (numeric_expression -> number .)
    error           reduce using rule 45 (numeric_expression -> number .)
    {               reduce using rule 45 (numeric_expression -> number .)
    IF              reduce using rule 45 (numeric_expression -> number .)
    WHILE           reduce using rule 45 (numeric_expression -> number .)
    FOR             reduce using rule 45 (numeric_expression -> number .)
    BREAK           reduce using rule 45 (numeric_expression -> number .)
    CONTINUE        reduce using rule 45 (numeric_expression -> number .)
    RETURN          reduce using rule 45 (numeric_expression -> number .)
    PRINT           reduce using rule 45 (numeric_expression -> number .)
    ID              reduce using rule 45 (numeric_expression -> number .)


state 44

    (46) numeric_expression -> matrix .

    +               reduce using rule 46 (numeric_expression -> matrix .)
    -               reduce using rule 46 (numeric_expression -> matrix .)
    *               reduce using rule 46 (numeric_expression -> matrix .)
    /               reduce using rule 46 (numeric_expression -> matrix .)
    DOTADD          reduce using rule 46 (numeric_expression -> matrix .)
    DOTSUB          reduce using rule 46 (numeric_expression -> matrix .)
    DOTMUL          reduce using rule 46 (numeric_expression -> matrix .)
    DOTDIV          reduce using rule 46 (numeric_expression -> matrix .)
    <               reduce using rule 46 (numeric_expression -> matrix .)
    >               reduce using rule 46 (numeric_expression -> matrix .)
    EQUAL           reduce using rule 46 (numeric_expression -> matrix .)
    NOTEQUAL        reduce using rule 46 (numeric_expression -> matrix .)
    LE              reduce using rule 46 (numeric_expression -> matrix .)
    GE              reduce using rule 46 (numeric_expression -> matrix .)
    '               reduce using rule 46 (numeric_expression -> matrix .)
    ;               reduce using rule 46 (numeric_expression -> matrix .)
    ,               reduce using rule 46 (numeric_expression -> matrix .)
    )               reduce using rule 46 (numeric_expression -> matrix .)
    ]               reduce using rule 46 (numeric_expression -> matrix .)
    :               reduce using rule 46 (numeric_expression -> matrix .)
    error           reduce using rule 46 (numeric_expression -> matrix .)
    {               reduce using rule 46 (numeric_expression -> matrix .)
    IF              reduce using rule 46 (numeric_expression -> matrix .)
    WHILE           reduce using rule 46 (numeric_expression -> matrix .)
    FOR             reduce using rule 46 (numeric_expression -> matrix .)
    BREAK           reduce using rule 46 (numeric_expression -> matrix .)
    CONTINUE        reduce using rule 46 (numeric_expression -> matrix .)
    RETURN          reduce using rule 46 (numeric_expression -> matrix .)
    PRINT           reduce using rule 46 (numeric_expression -> matrix .)
    ID              reduce using rule 46 (numeric_expression -> matrix .)


state 45

    (47) numeric_expression -> vector .

    +               reduce using rule 47 (numeric_expression -> vector .)
    -               reduce using rule 47 (numeric_expression -> vector .)
    *               reduce using rule 47 (numeric_expression -> vector .)
    /               reduce using rule 47 (numeric_expression -> vector .)
    DOTADD          reduce using rule 47 (numeric_expression -> vector .)
    DOTSUB          reduce using rule 47 (numeric_expression -> vector .)
    DOTMUL          reduce using rule 47 (numeric_expression -> vector .)
    DOTDIV          reduce using rule 47 (numeric_expression -> vector .)
    <               reduce using rule 47 (numeric_expression -> vector .)
    >               reduce using rule 47 (numeric_expression -> vector .)
    EQUAL           reduce using rule 47 (numeric_expression -> vector .)
    NOTEQUAL        reduce using rule 47 (numeric_expression -> vector .)
    LE              reduce using rule 47 (numeric_expression -> vector .)
    GE              reduce using rule 47 (numeric_expression -> vector .)
    '               reduce using rule 47 (numeric_expression -> vector .)
    ;               reduce using rule 47 (numeric_expression -> vector .)
    ,               reduce using rule 47 (numeric_expression -> vector .)
    )               reduce using rule 47 (numeric_expression -> vector .)
    ]               reduce using rule 47 (numeric_expression -> vector .)
    :               reduce using rule 47 (numeric_expression -> vector .)
    error           reduce using rule 47 (numeric_expression -> vector .)
    {               reduce using rule 47 (numeric_expression -> vector .)
    IF              reduce using rule 47 (numeric_expression -> vector .)
    WHILE           reduce using rule 47 (numeric_expression -> vector .)
    FOR             reduce using rule 47 (numeric_expression -> vector .)
    BREAK           reduce using rule 47 (numeric_expression -> vector .)
    CONTINUE        reduce using rule 47 (numeric_expression -> vector .)
    RETURN          reduce using rule 47 (numeric_expression -> vector .)
    PRINT           reduce using rule 47 (numeric_expression -> vector .)
    ID              reduce using rule 47 (numeric_expression -> vector .)


state 46

    (48) numeric_expression -> string .

    +               reduce using rule 48 (numeric_expression -> string .)
    -               reduce using rule 48 (numeric_expression -> string .)
    *               reduce using rule 48 (numeric_expression -> string .)
    /               reduce using rule 48 (numeric_expression -> string .)
    DOTADD          reduce using rule 48 (numeric_expression -> string .)
    DOTSUB          reduce using rule 48 (numeric_expression -> string .)
    DOTMUL          reduce using rule 48 (numeric_expression -> string .)
    DOTDIV          reduce using rule 48 (numeric_expression -> string .)
    <               reduce using rule 48 (numeric_expression -> string .)
    >               reduce using rule 48 (numeric_expression -> string .)
    EQUAL           reduce using rule 48 (numeric_expression -> string .)
    NOTEQUAL        reduce using rule 48 (numeric_expression -> string .)
    LE              reduce using rule 48 (numeric_expression -> string .)
    GE              reduce using rule 48 (numeric_expression -> string .)
    '               reduce using rule 48 (numeric_expression -> string .)
    ;               reduce using rule 48 (numeric_expression -> string .)
    ,               reduce using rule 48 (numeric_expression -> string .)
    )               reduce using rule 48 (numeric_expression -> string .)
    ]               reduce using rule 48 (numeric_expression -> string .)
    :               reduce using rule 48 (numeric_expression -> string .)
    error           reduce using rule 48 (numeric_expression -> string .)
    {               reduce using rule 48 (numeric_expression -> string .)
    IF              reduce using rule 48 (numeric_expression -> string .)
    WHILE           reduce using rule 48 (numeric_expression -> string .)
    FOR             reduce using rule 48 (numeric_expression -> string .)
    BREAK           reduce using rule 48 (numeric_expression -> string .)
    CONTINUE        reduce using rule 48 (numeric_expression -> string .)
    RETURN          reduce using rule 48 (numeric_expression -> string .)
    PRINT           reduce using rule 48 (numeric_expression -> string .)
    ID              reduce using rule 48 (numeric_expression -> string .)


state 47

    (49) numeric_expression -> unary_operation .

    +               reduce using rule 49 (numeric_expression -> unary_operation .)
    -               reduce using rule 49 (numeric_expression -> unary_operation .)
    *               reduce using rule 49 (numeric_expression -> unary_operation .)
    /               reduce using rule 49 (numeric_expression -> unary_operation .)
    DOTADD          reduce using rule 49 (numeric_expression -> unary_operation .)
    DOTSUB          reduce using rule 49 (numeric_expression -> unary_operation .)
    DOTMUL          reduce using rule 49 (numeric_expression -> unary_operation .)
    DOTDIV          reduce using rule 49 (numeric_expression -> unary_operation .)
    <               reduce using rule 49 (numeric_expression -> unary_operation .)
    >               reduce using rule 49 (numeric_expression -> unary_operation .)
    EQUAL           reduce using rule 49 (numeric_expression -> unary_operation .)
    NOTEQUAL        reduce using rule 49 (numeric_expression -> unary_operation .)
    LE              reduce using rule 49 (numeric_expression -> unary_operation .)
    GE              reduce using rule 49 (numeric_expression -> unary_operation .)
    '               reduce using rule 49 (numeric_expression -> unary_operation .)
    ;               reduce using rule 49 (numeric_expression -> unary_operation .)
    ,               reduce using rule 49 (numeric_expression -> unary_operation .)
    )               reduce using rule 49 (numeric_expression -> unary_operation .)
    ]               reduce using rule 49 (numeric_expression -> unary_operation .)
    :               reduce using rule 49 (numeric_expression -> unary_operation .)
    error           reduce using rule 49 (numeric_expression -> unary_operation .)
    {               reduce using rule 49 (numeric_expression -> unary_operation .)
    IF              reduce using rule 49 (numeric_expression -> unary_operation .)
    WHILE           reduce using rule 49 (numeric_expression -> unary_operation .)
    FOR             reduce using rule 49 (numeric_expression -> unary_operation .)
    BREAK           reduce using rule 49 (numeric_expression -> unary_operation .)
    CONTINUE        reduce using rule 49 (numeric_expression -> unary_operation .)
    RETURN          reduce using rule 49 (numeric_expression -> unary_operation .)
    PRINT           reduce using rule 49 (numeric_expression -> unary_operation .)
    ID              reduce using rule 49 (numeric_expression -> unary_operation .)


state 48

    (50) numeric_expression -> function .

    +               reduce using rule 50 (numeric_expression -> function .)
    -               reduce using rule 50 (numeric_expression -> function .)
    *               reduce using rule 50 (numeric_expression -> function .)
    /               reduce using rule 50 (numeric_expression -> function .)
    DOTADD          reduce using rule 50 (numeric_expression -> function .)
    DOTSUB          reduce using rule 50 (numeric_expression -> function .)
    DOTMUL          reduce using rule 50 (numeric_expression -> function .)
    DOTDIV          reduce using rule 50 (numeric_expression -> function .)
    <               reduce using rule 50 (numeric_expression -> function .)
    >               reduce using rule 50 (numeric_expression -> function .)
    EQUAL           reduce using rule 50 (numeric_expression -> function .)
    NOTEQUAL        reduce using rule 50 (numeric_expression -> function .)
    LE              reduce using rule 50 (numeric_expression -> function .)
    GE              reduce using rule 50 (numeric_expression -> function .)
    '               reduce using rule 50 (numeric_expression -> function .)
    ;               reduce using rule 50 (numeric_expression -> function .)
    ,               reduce using rule 50 (numeric_expression -> function .)
    )               reduce using rule 50 (numeric_expression -> function .)
    ]               reduce using rule 50 (numeric_expression -> function .)
    :               reduce using rule 50 (numeric_expression -> function .)
    error           reduce using rule 50 (numeric_expression -> function .)
    {               reduce using rule 50 (numeric_expression -> function .)
    IF              reduce using rule 50 (numeric_expression -> function .)
    WHILE           reduce using rule 50 (numeric_expression -> function .)
    FOR             reduce using rule 50 (numeric_expression -> function .)
    BREAK           reduce using rule 50 (numeric_expression -> function .)
    CONTINUE        reduce using rule 50 (numeric_expression -> function .)
    RETURN          reduce using rule 50 (numeric_expression -> function .)
    PRINT           reduce using rule 50 (numeric_expression -> function .)
    ID              reduce using rule 50 (numeric_expression -> function .)


state 49

    (51) numeric_expression -> ( . numeric_expression )
    (82) comparison_expression -> ( . comparison_expression )
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 87
    comparison_expression          shift and go to state 88
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 50

    (69) negation -> - . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 89
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 51

    (39) number -> INTNUM .

    +               reduce using rule 39 (number -> INTNUM .)
    -               reduce using rule 39 (number -> INTNUM .)
    *               reduce using rule 39 (number -> INTNUM .)
    /               reduce using rule 39 (number -> INTNUM .)
    DOTADD          reduce using rule 39 (number -> INTNUM .)
    DOTSUB          reduce using rule 39 (number -> INTNUM .)
    DOTMUL          reduce using rule 39 (number -> INTNUM .)
    DOTDIV          reduce using rule 39 (number -> INTNUM .)
    <               reduce using rule 39 (number -> INTNUM .)
    >               reduce using rule 39 (number -> INTNUM .)
    EQUAL           reduce using rule 39 (number -> INTNUM .)
    NOTEQUAL        reduce using rule 39 (number -> INTNUM .)
    LE              reduce using rule 39 (number -> INTNUM .)
    GE              reduce using rule 39 (number -> INTNUM .)
    '               reduce using rule 39 (number -> INTNUM .)
    ;               reduce using rule 39 (number -> INTNUM .)
    ,               reduce using rule 39 (number -> INTNUM .)
    )               reduce using rule 39 (number -> INTNUM .)
    ]               reduce using rule 39 (number -> INTNUM .)
    :               reduce using rule 39 (number -> INTNUM .)
    error           reduce using rule 39 (number -> INTNUM .)
    {               reduce using rule 39 (number -> INTNUM .)
    IF              reduce using rule 39 (number -> INTNUM .)
    WHILE           reduce using rule 39 (number -> INTNUM .)
    FOR             reduce using rule 39 (number -> INTNUM .)
    BREAK           reduce using rule 39 (number -> INTNUM .)
    CONTINUE        reduce using rule 39 (number -> INTNUM .)
    RETURN          reduce using rule 39 (number -> INTNUM .)
    PRINT           reduce using rule 39 (number -> INTNUM .)
    ID              reduce using rule 39 (number -> INTNUM .)


state 52

    (40) number -> FLOATNUM .

    +               reduce using rule 40 (number -> FLOATNUM .)
    -               reduce using rule 40 (number -> FLOATNUM .)
    *               reduce using rule 40 (number -> FLOATNUM .)
    /               reduce using rule 40 (number -> FLOATNUM .)
    DOTADD          reduce using rule 40 (number -> FLOATNUM .)
    DOTSUB          reduce using rule 40 (number -> FLOATNUM .)
    DOTMUL          reduce using rule 40 (number -> FLOATNUM .)
    DOTDIV          reduce using rule 40 (number -> FLOATNUM .)
    <               reduce using rule 40 (number -> FLOATNUM .)
    >               reduce using rule 40 (number -> FLOATNUM .)
    EQUAL           reduce using rule 40 (number -> FLOATNUM .)
    NOTEQUAL        reduce using rule 40 (number -> FLOATNUM .)
    LE              reduce using rule 40 (number -> FLOATNUM .)
    GE              reduce using rule 40 (number -> FLOATNUM .)
    '               reduce using rule 40 (number -> FLOATNUM .)
    ;               reduce using rule 40 (number -> FLOATNUM .)
    ,               reduce using rule 40 (number -> FLOATNUM .)
    )               reduce using rule 40 (number -> FLOATNUM .)
    ]               reduce using rule 40 (number -> FLOATNUM .)
    :               reduce using rule 40 (number -> FLOATNUM .)
    error           reduce using rule 40 (number -> FLOATNUM .)
    {               reduce using rule 40 (number -> FLOATNUM .)
    IF              reduce using rule 40 (number -> FLOATNUM .)
    WHILE           reduce using rule 40 (number -> FLOATNUM .)
    FOR             reduce using rule 40 (number -> FLOATNUM .)
    BREAK           reduce using rule 40 (number -> FLOATNUM .)
    CONTINUE        reduce using rule 40 (number -> FLOATNUM .)
    RETURN          reduce using rule 40 (number -> FLOATNUM .)
    PRINT           reduce using rule 40 (number -> FLOATNUM .)
    ID              reduce using rule 40 (number -> FLOATNUM .)


state 53

    (41) number -> var .
    (38) var -> var . [ vector_body ]

    +               reduce using rule 41 (number -> var .)
    -               reduce using rule 41 (number -> var .)
    *               reduce using rule 41 (number -> var .)
    /               reduce using rule 41 (number -> var .)
    DOTADD          reduce using rule 41 (number -> var .)
    DOTSUB          reduce using rule 41 (number -> var .)
    DOTMUL          reduce using rule 41 (number -> var .)
    DOTDIV          reduce using rule 41 (number -> var .)
    <               reduce using rule 41 (number -> var .)
    >               reduce using rule 41 (number -> var .)
    EQUAL           reduce using rule 41 (number -> var .)
    NOTEQUAL        reduce using rule 41 (number -> var .)
    LE              reduce using rule 41 (number -> var .)
    GE              reduce using rule 41 (number -> var .)
    '               reduce using rule 41 (number -> var .)
    ;               reduce using rule 41 (number -> var .)
    ,               reduce using rule 41 (number -> var .)
    )               reduce using rule 41 (number -> var .)
    ]               reduce using rule 41 (number -> var .)
    :               reduce using rule 41 (number -> var .)
    error           reduce using rule 41 (number -> var .)
    {               reduce using rule 41 (number -> var .)
    IF              reduce using rule 41 (number -> var .)
    WHILE           reduce using rule 41 (number -> var .)
    FOR             reduce using rule 41 (number -> var .)
    BREAK           reduce using rule 41 (number -> var .)
    CONTINUE        reduce using rule 41 (number -> var .)
    RETURN          reduce using rule 41 (number -> var .)
    PRINT           reduce using rule 41 (number -> var .)
    ID              reduce using rule 41 (number -> var .)
    [               shift and go to state 91


state 54

    (64) matrix -> [ . matrix_body ]
    (60) vector -> [ . vector_body ]
    (61) vector -> [ . ]
    (65) matrix_body -> . vector_body
    (66) matrix_body -> . matrix_body ; vector_body
    (62) vector_body -> . numeric_expression
    (63) vector_body -> . vector_body , numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    ]               shift and go to state 93
    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    matrix_body                    shift and go to state 92
    vector_body                    shift and go to state 94
    numeric_expression             shift and go to state 95
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 55

    (27) string -> STRING .

    +               reduce using rule 27 (string -> STRING .)
    -               reduce using rule 27 (string -> STRING .)
    *               reduce using rule 27 (string -> STRING .)
    /               reduce using rule 27 (string -> STRING .)
    DOTADD          reduce using rule 27 (string -> STRING .)
    DOTSUB          reduce using rule 27 (string -> STRING .)
    DOTMUL          reduce using rule 27 (string -> STRING .)
    DOTDIV          reduce using rule 27 (string -> STRING .)
    <               reduce using rule 27 (string -> STRING .)
    >               reduce using rule 27 (string -> STRING .)
    EQUAL           reduce using rule 27 (string -> STRING .)
    NOTEQUAL        reduce using rule 27 (string -> STRING .)
    LE              reduce using rule 27 (string -> STRING .)
    GE              reduce using rule 27 (string -> STRING .)
    '               reduce using rule 27 (string -> STRING .)
    ;               reduce using rule 27 (string -> STRING .)
    ,               reduce using rule 27 (string -> STRING .)
    )               reduce using rule 27 (string -> STRING .)
    ]               reduce using rule 27 (string -> STRING .)
    :               reduce using rule 27 (string -> STRING .)
    error           reduce using rule 27 (string -> STRING .)
    {               reduce using rule 27 (string -> STRING .)
    IF              reduce using rule 27 (string -> STRING .)
    WHILE           reduce using rule 27 (string -> STRING .)
    FOR             reduce using rule 27 (string -> STRING .)
    BREAK           reduce using rule 27 (string -> STRING .)
    CONTINUE        reduce using rule 27 (string -> STRING .)
    RETURN          reduce using rule 27 (string -> STRING .)
    PRINT           reduce using rule 27 (string -> STRING .)
    ID              reduce using rule 27 (string -> STRING .)


state 56

    (67) unary_operation -> negation .

    +               reduce using rule 67 (unary_operation -> negation .)
    -               reduce using rule 67 (unary_operation -> negation .)
    *               reduce using rule 67 (unary_operation -> negation .)
    /               reduce using rule 67 (unary_operation -> negation .)
    DOTADD          reduce using rule 67 (unary_operation -> negation .)
    DOTSUB          reduce using rule 67 (unary_operation -> negation .)
    DOTMUL          reduce using rule 67 (unary_operation -> negation .)
    DOTDIV          reduce using rule 67 (unary_operation -> negation .)
    <               reduce using rule 67 (unary_operation -> negation .)
    >               reduce using rule 67 (unary_operation -> negation .)
    EQUAL           reduce using rule 67 (unary_operation -> negation .)
    NOTEQUAL        reduce using rule 67 (unary_operation -> negation .)
    LE              reduce using rule 67 (unary_operation -> negation .)
    GE              reduce using rule 67 (unary_operation -> negation .)
    '               reduce using rule 67 (unary_operation -> negation .)
    ;               reduce using rule 67 (unary_operation -> negation .)
    ,               reduce using rule 67 (unary_operation -> negation .)
    )               reduce using rule 67 (unary_operation -> negation .)
    ]               reduce using rule 67 (unary_operation -> negation .)
    :               reduce using rule 67 (unary_operation -> negation .)
    error           reduce using rule 67 (unary_operation -> negation .)
    {               reduce using rule 67 (unary_operation -> negation .)
    IF              reduce using rule 67 (unary_operation -> negation .)
    WHILE           reduce using rule 67 (unary_operation -> negation .)
    FOR             reduce using rule 67 (unary_operation -> negation .)
    BREAK           reduce using rule 67 (unary_operation -> negation .)
    CONTINUE        reduce using rule 67 (unary_operation -> negation .)
    RETURN          reduce using rule 67 (unary_operation -> negation .)
    PRINT           reduce using rule 67 (unary_operation -> negation .)
    ID              reduce using rule 67 (unary_operation -> negation .)


state 57

    (68) unary_operation -> transposition .

    +               reduce using rule 68 (unary_operation -> transposition .)
    -               reduce using rule 68 (unary_operation -> transposition .)
    *               reduce using rule 68 (unary_operation -> transposition .)
    /               reduce using rule 68 (unary_operation -> transposition .)
    DOTADD          reduce using rule 68 (unary_operation -> transposition .)
    DOTSUB          reduce using rule 68 (unary_operation -> transposition .)
    DOTMUL          reduce using rule 68 (unary_operation -> transposition .)
    DOTDIV          reduce using rule 68 (unary_operation -> transposition .)
    <               reduce using rule 68 (unary_operation -> transposition .)
    >               reduce using rule 68 (unary_operation -> transposition .)
    EQUAL           reduce using rule 68 (unary_operation -> transposition .)
    NOTEQUAL        reduce using rule 68 (unary_operation -> transposition .)
    LE              reduce using rule 68 (unary_operation -> transposition .)
    GE              reduce using rule 68 (unary_operation -> transposition .)
    '               reduce using rule 68 (unary_operation -> transposition .)
    ;               reduce using rule 68 (unary_operation -> transposition .)
    ,               reduce using rule 68 (unary_operation -> transposition .)
    )               reduce using rule 68 (unary_operation -> transposition .)
    ]               reduce using rule 68 (unary_operation -> transposition .)
    :               reduce using rule 68 (unary_operation -> transposition .)
    error           reduce using rule 68 (unary_operation -> transposition .)
    {               reduce using rule 68 (unary_operation -> transposition .)
    IF              reduce using rule 68 (unary_operation -> transposition .)
    WHILE           reduce using rule 68 (unary_operation -> transposition .)
    FOR             reduce using rule 68 (unary_operation -> transposition .)
    BREAK           reduce using rule 68 (unary_operation -> transposition .)
    CONTINUE        reduce using rule 68 (unary_operation -> transposition .)
    RETURN          reduce using rule 68 (unary_operation -> transposition .)
    PRINT           reduce using rule 68 (unary_operation -> transposition .)
    ID              reduce using rule 68 (unary_operation -> transposition .)


state 58

    (71) function -> function_name . ( vector_body )
    (72) function -> function_name . ( error )

    (               shift and go to state 96


state 59

    (73) function_name -> EYE .

    (               reduce using rule 73 (function_name -> EYE .)


state 60

    (74) function_name -> ZEROS .

    (               reduce using rule 74 (function_name -> ZEROS .)


state 61

    (75) function_name -> ONES .

    (               reduce using rule 75 (function_name -> ONES .)


state 62

    (24) print -> PRINT print_body .

    ;               reduce using rule 24 (print -> PRINT print_body .)


state 63

    (25) print_body -> expression . , print_body
    (26) print_body -> expression .

    ,               shift and go to state 97
    ;               reduce using rule 26 (print_body -> expression .)


state 64

    (38) var -> var [ . vector_body ]
    (42) array_range -> var [ . numeric_expression , numeric_expression ]
    (62) vector_body -> . numeric_expression
    (63) vector_body -> . vector_body , numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    var                            shift and go to state 53
    vector_body                    shift and go to state 98
    numeric_expression             shift and go to state 99
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 65

    (8) block -> { instructions } .

    error           reduce using rule 8 (block -> { instructions } .)
    {               reduce using rule 8 (block -> { instructions } .)
    IF              reduce using rule 8 (block -> { instructions } .)
    WHILE           reduce using rule 8 (block -> { instructions } .)
    FOR             reduce using rule 8 (block -> { instructions } .)
    BREAK           reduce using rule 8 (block -> { instructions } .)
    CONTINUE        reduce using rule 8 (block -> { instructions } .)
    RETURN          reduce using rule 8 (block -> { instructions } .)
    PRINT           reduce using rule 8 (block -> { instructions } .)
    ID              reduce using rule 8 (block -> { instructions } .)
    $end            reduce using rule 8 (block -> { instructions } .)
    }               reduce using rule 8 (block -> { instructions } .)
    ELSE            reduce using rule 8 (block -> { instructions } .)


state 66

    (9) block -> { error } .

    error           reduce using rule 9 (block -> { error } .)
    {               reduce using rule 9 (block -> { error } .)
    IF              reduce using rule 9 (block -> { error } .)
    WHILE           reduce using rule 9 (block -> { error } .)
    FOR             reduce using rule 9 (block -> { error } .)
    BREAK           reduce using rule 9 (block -> { error } .)
    CONTINUE        reduce using rule 9 (block -> { error } .)
    RETURN          reduce using rule 9 (block -> { error } .)
    PRINT           reduce using rule 9 (block -> { error } .)
    ID              reduce using rule 9 (block -> { error } .)
    $end            reduce using rule 9 (block -> { error } .)
    }               reduce using rule 9 (block -> { error } .)
    ELSE            reduce using rule 9 (block -> { error } .)


state 67

    (10) conditional -> IF ( expression . ) instruction
    (11) conditional -> IF ( expression . ) instruction ELSE instruction

    )               shift and go to state 100


state 68

    (14) while -> WHILE ( expression . ) instruction

    )               shift and go to state 101


state 69

    (15) for -> FOR ID = . numeric_expression : numeric_expression instruction
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 102
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 70

    (30) assignment -> assignment_var assignment_operand expression .

    ;               reduce using rule 30 (assignment -> assignment_var assignment_operand expression .)


state 71

    (31) assignment -> assignment_var = string .

    ;               reduce using rule 31 (assignment -> assignment_var = string .)


state 72

    (52) numeric_expression -> numeric_expression + . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 103
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 73

    (53) numeric_expression -> numeric_expression - . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 104
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 74

    (54) numeric_expression -> numeric_expression * . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 105
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 75

    (55) numeric_expression -> numeric_expression / . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 106
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 76

    (56) numeric_expression -> numeric_expression DOTADD . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 107
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 77

    (57) numeric_expression -> numeric_expression DOTSUB . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 108
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 78

    (58) numeric_expression -> numeric_expression DOTMUL . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 109
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 79

    (59) numeric_expression -> numeric_expression DOTDIV . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 110
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 80

    (76) comparison_expression -> numeric_expression < . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 111
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 81

    (77) comparison_expression -> numeric_expression > . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 112
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 82

    (78) comparison_expression -> numeric_expression EQUAL . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 113
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 83

    (79) comparison_expression -> numeric_expression NOTEQUAL . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 114
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 84

    (80) comparison_expression -> numeric_expression LE . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 115
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 85

    (81) comparison_expression -> numeric_expression GE . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 116
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 86

    (70) transposition -> numeric_expression ' .

    +               reduce using rule 70 (transposition -> numeric_expression ' .)
    -               reduce using rule 70 (transposition -> numeric_expression ' .)
    *               reduce using rule 70 (transposition -> numeric_expression ' .)
    /               reduce using rule 70 (transposition -> numeric_expression ' .)
    DOTADD          reduce using rule 70 (transposition -> numeric_expression ' .)
    DOTSUB          reduce using rule 70 (transposition -> numeric_expression ' .)
    DOTMUL          reduce using rule 70 (transposition -> numeric_expression ' .)
    DOTDIV          reduce using rule 70 (transposition -> numeric_expression ' .)
    <               reduce using rule 70 (transposition -> numeric_expression ' .)
    >               reduce using rule 70 (transposition -> numeric_expression ' .)
    EQUAL           reduce using rule 70 (transposition -> numeric_expression ' .)
    NOTEQUAL        reduce using rule 70 (transposition -> numeric_expression ' .)
    LE              reduce using rule 70 (transposition -> numeric_expression ' .)
    GE              reduce using rule 70 (transposition -> numeric_expression ' .)
    '               reduce using rule 70 (transposition -> numeric_expression ' .)
    ;               reduce using rule 70 (transposition -> numeric_expression ' .)
    ,               reduce using rule 70 (transposition -> numeric_expression ' .)
    )               reduce using rule 70 (transposition -> numeric_expression ' .)
    ]               reduce using rule 70 (transposition -> numeric_expression ' .)
    :               reduce using rule 70 (transposition -> numeric_expression ' .)
    error           reduce using rule 70 (transposition -> numeric_expression ' .)
    {               reduce using rule 70 (transposition -> numeric_expression ' .)
    IF              reduce using rule 70 (transposition -> numeric_expression ' .)
    WHILE           reduce using rule 70 (transposition -> numeric_expression ' .)
    FOR             reduce using rule 70 (transposition -> numeric_expression ' .)
    BREAK           reduce using rule 70 (transposition -> numeric_expression ' .)
    CONTINUE        reduce using rule 70 (transposition -> numeric_expression ' .)
    RETURN          reduce using rule 70 (transposition -> numeric_expression ' .)
    PRINT           reduce using rule 70 (transposition -> numeric_expression ' .)
    ID              reduce using rule 70 (transposition -> numeric_expression ' .)


state 87

    (51) numeric_expression -> ( numeric_expression . )
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (76) comparison_expression -> numeric_expression . < numeric_expression
    (77) comparison_expression -> numeric_expression . > numeric_expression
    (78) comparison_expression -> numeric_expression . EQUAL numeric_expression
    (79) comparison_expression -> numeric_expression . NOTEQUAL numeric_expression
    (80) comparison_expression -> numeric_expression . LE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (70) transposition -> numeric_expression . '

    )               shift and go to state 117
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    EQUAL           shift and go to state 82
    NOTEQUAL        shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    '               shift and go to state 86


state 88

    (82) comparison_expression -> ( comparison_expression . )

    )               shift and go to state 118


state 89

    (69) negation -> - numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 69 (negation -> - numeric_expression .)
    -               reduce using rule 69 (negation -> - numeric_expression .)
    *               reduce using rule 69 (negation -> - numeric_expression .)
    /               reduce using rule 69 (negation -> - numeric_expression .)
    DOTADD          reduce using rule 69 (negation -> - numeric_expression .)
    DOTSUB          reduce using rule 69 (negation -> - numeric_expression .)
    DOTMUL          reduce using rule 69 (negation -> - numeric_expression .)
    DOTDIV          reduce using rule 69 (negation -> - numeric_expression .)
    <               reduce using rule 69 (negation -> - numeric_expression .)
    >               reduce using rule 69 (negation -> - numeric_expression .)
    EQUAL           reduce using rule 69 (negation -> - numeric_expression .)
    NOTEQUAL        reduce using rule 69 (negation -> - numeric_expression .)
    LE              reduce using rule 69 (negation -> - numeric_expression .)
    GE              reduce using rule 69 (negation -> - numeric_expression .)
    ;               reduce using rule 69 (negation -> - numeric_expression .)
    ,               reduce using rule 69 (negation -> - numeric_expression .)
    )               reduce using rule 69 (negation -> - numeric_expression .)
    ]               reduce using rule 69 (negation -> - numeric_expression .)
    :               reduce using rule 69 (negation -> - numeric_expression .)
    error           reduce using rule 69 (negation -> - numeric_expression .)
    {               reduce using rule 69 (negation -> - numeric_expression .)
    IF              reduce using rule 69 (negation -> - numeric_expression .)
    WHILE           reduce using rule 69 (negation -> - numeric_expression .)
    FOR             reduce using rule 69 (negation -> - numeric_expression .)
    BREAK           reduce using rule 69 (negation -> - numeric_expression .)
    CONTINUE        reduce using rule 69 (negation -> - numeric_expression .)
    RETURN          reduce using rule 69 (negation -> - numeric_expression .)
    PRINT           reduce using rule 69 (negation -> - numeric_expression .)
    ID              reduce using rule 69 (negation -> - numeric_expression .)
    '               shift and go to state 86

  ! '               [ reduce using rule 69 (negation -> - numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]
  ! DOTMUL          [ shift and go to state 78 ]
  ! DOTDIV          [ shift and go to state 79 ]


state 90

    (51) numeric_expression -> ( . numeric_expression )
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 119
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 91

    (38) var -> var [ . vector_body ]
    (62) vector_body -> . numeric_expression
    (63) vector_body -> . vector_body , numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    var                            shift and go to state 53
    vector_body                    shift and go to state 98
    numeric_expression             shift and go to state 95
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 92

    (64) matrix -> [ matrix_body . ]
    (66) matrix_body -> matrix_body . ; vector_body

    ]               shift and go to state 120
    ;               shift and go to state 121


state 93

    (61) vector -> [ ] .

    +               reduce using rule 61 (vector -> [ ] .)
    -               reduce using rule 61 (vector -> [ ] .)
    *               reduce using rule 61 (vector -> [ ] .)
    /               reduce using rule 61 (vector -> [ ] .)
    DOTADD          reduce using rule 61 (vector -> [ ] .)
    DOTSUB          reduce using rule 61 (vector -> [ ] .)
    DOTMUL          reduce using rule 61 (vector -> [ ] .)
    DOTDIV          reduce using rule 61 (vector -> [ ] .)
    <               reduce using rule 61 (vector -> [ ] .)
    >               reduce using rule 61 (vector -> [ ] .)
    EQUAL           reduce using rule 61 (vector -> [ ] .)
    NOTEQUAL        reduce using rule 61 (vector -> [ ] .)
    LE              reduce using rule 61 (vector -> [ ] .)
    GE              reduce using rule 61 (vector -> [ ] .)
    '               reduce using rule 61 (vector -> [ ] .)
    ;               reduce using rule 61 (vector -> [ ] .)
    ,               reduce using rule 61 (vector -> [ ] .)
    )               reduce using rule 61 (vector -> [ ] .)
    ]               reduce using rule 61 (vector -> [ ] .)
    :               reduce using rule 61 (vector -> [ ] .)
    error           reduce using rule 61 (vector -> [ ] .)
    {               reduce using rule 61 (vector -> [ ] .)
    IF              reduce using rule 61 (vector -> [ ] .)
    WHILE           reduce using rule 61 (vector -> [ ] .)
    FOR             reduce using rule 61 (vector -> [ ] .)
    BREAK           reduce using rule 61 (vector -> [ ] .)
    CONTINUE        reduce using rule 61 (vector -> [ ] .)
    RETURN          reduce using rule 61 (vector -> [ ] .)
    PRINT           reduce using rule 61 (vector -> [ ] .)
    ID              reduce using rule 61 (vector -> [ ] .)


state 94

    (60) vector -> [ vector_body . ]
    (65) matrix_body -> vector_body .
    (63) vector_body -> vector_body . , numeric_expression

  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 122
    ;               reduce using rule 65 (matrix_body -> vector_body .)
    ,               shift and go to state 123

  ! ]               [ reduce using rule 65 (matrix_body -> vector_body .) ]


state 95

    (62) vector_body -> numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ]               reduce using rule 62 (vector_body -> numeric_expression .)
    ,               reduce using rule 62 (vector_body -> numeric_expression .)
    ;               reduce using rule 62 (vector_body -> numeric_expression .)
    )               reduce using rule 62 (vector_body -> numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 96

    (71) function -> function_name ( . vector_body )
    (72) function -> function_name ( . error )
    (62) vector_body -> . numeric_expression
    (63) vector_body -> . vector_body , numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    error           shift and go to state 125
    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    function_name                  shift and go to state 58
    vector_body                    shift and go to state 124
    numeric_expression             shift and go to state 95
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57

state 97

    (25) print_body -> expression , . print_body
    (25) print_body -> . expression , print_body
    (26) print_body -> . expression
    (43) expression -> . numeric_expression
    (44) expression -> . comparison_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (76) comparison_expression -> . numeric_expression < numeric_expression
    (77) comparison_expression -> . numeric_expression > numeric_expression
    (78) comparison_expression -> . numeric_expression EQUAL numeric_expression
    (79) comparison_expression -> . numeric_expression NOTEQUAL numeric_expression
    (80) comparison_expression -> . numeric_expression LE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . ( comparison_expression )
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 49
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    expression                     shift and go to state 63
    print_body                     shift and go to state 126
    numeric_expression             shift and go to state 41
    comparison_expression          shift and go to state 42
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 98

    (38) var -> var [ vector_body . ]
    (63) vector_body -> vector_body . , numeric_expression

    ]               shift and go to state 127
    ,               shift and go to state 123


state 99

    (42) array_range -> var [ numeric_expression . , numeric_expression ]
    (62) vector_body -> numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 128
    ]               reduce using rule 62 (vector_body -> numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! ,               [ reduce using rule 62 (vector_body -> numeric_expression .) ]


state 100

    (10) conditional -> IF ( expression ) . instruction
    (11) conditional -> IF ( expression ) . instruction ELSE instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 129
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 101

    (14) while -> WHILE ( expression ) . instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 130
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 102

    (15) for -> FOR ID = numeric_expression . : numeric_expression instruction
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    :               shift and go to state 131
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 103

    (52) numeric_expression -> numeric_expression + numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    -               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    <               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    >               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    EQUAL           reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    NOTEQUAL        reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    LE              reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    GE              reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    ;               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    ,               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    )               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    ]               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    :               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    error           reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    {               reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    IF              reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    WHILE           reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    FOR             reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    BREAK           reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    CONTINUE        reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    RETURN          reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    PRINT           reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    ID              reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .)
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! *               [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! /               [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTADD          [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTSUB          [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! '               [ reduce using rule 52 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]


state 104

    (53) numeric_expression -> numeric_expression - numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    -               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    <               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    >               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    EQUAL           reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    NOTEQUAL        reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    LE              reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    GE              reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    ;               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    ,               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    )               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    ]               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    :               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    error           reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    {               reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    IF              reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    WHILE           reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    FOR             reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    BREAK           reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    CONTINUE        reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    RETURN          reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    PRINT           reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    ID              reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .)
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! *               [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! /               [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTADD          [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTSUB          [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! '               [ reduce using rule 53 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]


state 105

    (54) numeric_expression -> numeric_expression * numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    -               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    *               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    /               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTADD          reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTSUB          reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    <               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    >               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    EQUAL           reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    NOTEQUAL        reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    LE              reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    GE              reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    ;               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    ,               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    )               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    ]               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    :               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    error           reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    {               reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    IF              reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    WHILE           reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    FOR             reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    BREAK           reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    CONTINUE        reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    RETURN          reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    PRINT           reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    ID              reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! DOTMUL          [ reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .) ]
  ! '               [ reduce using rule 54 (numeric_expression -> numeric_expression * numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]


state 106

    (55) numeric_expression -> numeric_expression / numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    -               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    *               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    /               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTADD          reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTSUB          reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    <               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    >               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    EQUAL           reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    NOTEQUAL        reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    LE              reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    GE              reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    ;               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    ,               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    )               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    ]               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    :               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    error           reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    {               reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    IF              reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    WHILE           reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    FOR             reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    BREAK           reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    CONTINUE        reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    RETURN          reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    PRINT           reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    ID              reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! DOTMUL          [ reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .) ]
  ! '               [ reduce using rule 55 (numeric_expression -> numeric_expression / numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]


state 107

    (56) numeric_expression -> numeric_expression DOTADD numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    -               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    DOTADD          reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    DOTSUB          reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    <               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    >               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    EQUAL           reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    NOTEQUAL        reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    LE              reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    GE              reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ;               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ,               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    )               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ]               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    :               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    error           reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    {               reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    IF              reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    WHILE           reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    FOR             reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    BREAK           reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    CONTINUE        reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    RETURN          reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    PRINT           reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ID              reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    *               shift and go to state 74
    /               shift and go to state 75
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! *               [ reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! /               [ reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! '               [ reduce using rule 56 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]


state 108

    (57) numeric_expression -> numeric_expression DOTSUB numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    -               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    DOTADD          reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    DOTSUB          reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    <               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    >               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    EQUAL           reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    NOTEQUAL        reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    LE              reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    GE              reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ;               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ,               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    )               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ]               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    :               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    error           reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    {               reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    IF              reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    WHILE           reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    FOR             reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    BREAK           reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    CONTINUE        reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    RETURN          reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    PRINT           reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ID              reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    *               shift and go to state 74
    /               shift and go to state 75
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86

  ! *               [ reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! /               [ reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! '               [ reduce using rule 57 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]


state 109

    (58) numeric_expression -> numeric_expression DOTMUL numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    -               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    *               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    /               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTADD          reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTSUB          reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTMUL          reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTDIV          reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    <               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    >               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    EQUAL           reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    NOTEQUAL        reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    LE              reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    GE              reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ;               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ,               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    )               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ]               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    :               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    error           reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    {               reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    IF              reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    WHILE           reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    FOR             reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    BREAK           reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    CONTINUE        reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    RETURN          reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    PRINT           reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ID              reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    '               shift and go to state 86

  ! '               [ reduce using rule 58 (numeric_expression -> numeric_expression DOTMUL numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]
  ! DOTMUL          [ shift and go to state 78 ]
  ! DOTDIV          [ shift and go to state 79 ]


state 110

    (59) numeric_expression -> numeric_expression DOTDIV numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    +               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    -               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    *               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    /               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTADD          reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTSUB          reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTMUL          reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTDIV          reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    <               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    >               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    EQUAL           reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    NOTEQUAL        reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    LE              reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    GE              reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ;               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ,               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    )               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ]               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    :               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    error           reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    {               reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    IF              reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    WHILE           reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    FOR             reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    BREAK           reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    CONTINUE        reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    RETURN          reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    PRINT           reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ID              reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    '               shift and go to state 86

  ! '               [ reduce using rule 59 (numeric_expression -> numeric_expression DOTDIV numeric_expression .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! DOTADD          [ shift and go to state 76 ]
  ! DOTSUB          [ shift and go to state 77 ]
  ! DOTMUL          [ shift and go to state 78 ]
  ! DOTDIV          [ shift and go to state 79 ]


state 111

    (76) comparison_expression -> numeric_expression < numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 76 (comparison_expression -> numeric_expression < numeric_expression .)
    ,               reduce using rule 76 (comparison_expression -> numeric_expression < numeric_expression .)
    )               reduce using rule 76 (comparison_expression -> numeric_expression < numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 112

    (77) comparison_expression -> numeric_expression > numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 77 (comparison_expression -> numeric_expression > numeric_expression .)
    ,               reduce using rule 77 (comparison_expression -> numeric_expression > numeric_expression .)
    )               reduce using rule 77 (comparison_expression -> numeric_expression > numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 113

    (78) comparison_expression -> numeric_expression EQUAL numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 78 (comparison_expression -> numeric_expression EQUAL numeric_expression .)
    ,               reduce using rule 78 (comparison_expression -> numeric_expression EQUAL numeric_expression .)
    )               reduce using rule 78 (comparison_expression -> numeric_expression EQUAL numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 114

    (79) comparison_expression -> numeric_expression NOTEQUAL numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 79 (comparison_expression -> numeric_expression NOTEQUAL numeric_expression .)
    ,               reduce using rule 79 (comparison_expression -> numeric_expression NOTEQUAL numeric_expression .)
    )               reduce using rule 79 (comparison_expression -> numeric_expression NOTEQUAL numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 115

    (80) comparison_expression -> numeric_expression LE numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 80 (comparison_expression -> numeric_expression LE numeric_expression .)
    ,               reduce using rule 80 (comparison_expression -> numeric_expression LE numeric_expression .)
    )               reduce using rule 80 (comparison_expression -> numeric_expression LE numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 116

    (81) comparison_expression -> numeric_expression GE numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ;               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    ,               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    )               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 117

    (51) numeric_expression -> ( numeric_expression ) .

    +               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    -               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    *               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    /               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    DOTADD          reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    DOTSUB          reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    DOTMUL          reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    DOTDIV          reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    <               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    >               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    EQUAL           reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    NOTEQUAL        reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    LE              reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    GE              reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    '               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    ;               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    ,               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    )               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    ]               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    :               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    error           reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    {               reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    IF              reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    WHILE           reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    FOR             reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    BREAK           reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    CONTINUE        reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    RETURN          reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    PRINT           reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)
    ID              reduce using rule 51 (numeric_expression -> ( numeric_expression ) .)


state 118

    (82) comparison_expression -> ( comparison_expression ) .

    ;               reduce using rule 82 (comparison_expression -> ( comparison_expression ) .)
    ,               reduce using rule 82 (comparison_expression -> ( comparison_expression ) .)
    )               reduce using rule 82 (comparison_expression -> ( comparison_expression ) .)


state 119

    (51) numeric_expression -> ( numeric_expression . )
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    )               shift and go to state 117
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 120

    (64) matrix -> [ matrix_body ] .

    +               reduce using rule 64 (matrix -> [ matrix_body ] .)
    -               reduce using rule 64 (matrix -> [ matrix_body ] .)
    *               reduce using rule 64 (matrix -> [ matrix_body ] .)
    /               reduce using rule 64 (matrix -> [ matrix_body ] .)
    DOTADD          reduce using rule 64 (matrix -> [ matrix_body ] .)
    DOTSUB          reduce using rule 64 (matrix -> [ matrix_body ] .)
    DOTMUL          reduce using rule 64 (matrix -> [ matrix_body ] .)
    DOTDIV          reduce using rule 64 (matrix -> [ matrix_body ] .)
    <               reduce using rule 64 (matrix -> [ matrix_body ] .)
    >               reduce using rule 64 (matrix -> [ matrix_body ] .)
    EQUAL           reduce using rule 64 (matrix -> [ matrix_body ] .)
    NOTEQUAL        reduce using rule 64 (matrix -> [ matrix_body ] .)
    LE              reduce using rule 64 (matrix -> [ matrix_body ] .)
    GE              reduce using rule 64 (matrix -> [ matrix_body ] .)
    '               reduce using rule 64 (matrix -> [ matrix_body ] .)
    ;               reduce using rule 64 (matrix -> [ matrix_body ] .)
    ,               reduce using rule 64 (matrix -> [ matrix_body ] .)
    )               reduce using rule 64 (matrix -> [ matrix_body ] .)
    ]               reduce using rule 64 (matrix -> [ matrix_body ] .)
    :               reduce using rule 64 (matrix -> [ matrix_body ] .)
    error           reduce using rule 64 (matrix -> [ matrix_body ] .)
    {               reduce using rule 64 (matrix -> [ matrix_body ] .)
    IF              reduce using rule 64 (matrix -> [ matrix_body ] .)
    WHILE           reduce using rule 64 (matrix -> [ matrix_body ] .)
    FOR             reduce using rule 64 (matrix -> [ matrix_body ] .)
    BREAK           reduce using rule 64 (matrix -> [ matrix_body ] .)
    CONTINUE        reduce using rule 64 (matrix -> [ matrix_body ] .)
    RETURN          reduce using rule 64 (matrix -> [ matrix_body ] .)
    PRINT           reduce using rule 64 (matrix -> [ matrix_body ] .)
    ID              reduce using rule 64 (matrix -> [ matrix_body ] .)


state 121

    (66) matrix_body -> matrix_body ; . vector_body
    (62) vector_body -> . numeric_expression
    (63) vector_body -> . vector_body , numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    vector_body                    shift and go to state 132
    numeric_expression             shift and go to state 95
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 122

    (60) vector -> [ vector_body ] .

    +               reduce using rule 60 (vector -> [ vector_body ] .)
    -               reduce using rule 60 (vector -> [ vector_body ] .)
    *               reduce using rule 60 (vector -> [ vector_body ] .)
    /               reduce using rule 60 (vector -> [ vector_body ] .)
    DOTADD          reduce using rule 60 (vector -> [ vector_body ] .)
    DOTSUB          reduce using rule 60 (vector -> [ vector_body ] .)
    DOTMUL          reduce using rule 60 (vector -> [ vector_body ] .)
    DOTDIV          reduce using rule 60 (vector -> [ vector_body ] .)
    <               reduce using rule 60 (vector -> [ vector_body ] .)
    >               reduce using rule 60 (vector -> [ vector_body ] .)
    EQUAL           reduce using rule 60 (vector -> [ vector_body ] .)
    NOTEQUAL        reduce using rule 60 (vector -> [ vector_body ] .)
    LE              reduce using rule 60 (vector -> [ vector_body ] .)
    GE              reduce using rule 60 (vector -> [ vector_body ] .)
    '               reduce using rule 60 (vector -> [ vector_body ] .)
    ;               reduce using rule 60 (vector -> [ vector_body ] .)
    ,               reduce using rule 60 (vector -> [ vector_body ] .)
    )               reduce using rule 60 (vector -> [ vector_body ] .)
    ]               reduce using rule 60 (vector -> [ vector_body ] .)
    :               reduce using rule 60 (vector -> [ vector_body ] .)
    error           reduce using rule 60 (vector -> [ vector_body ] .)
    {               reduce using rule 60 (vector -> [ vector_body ] .)
    IF              reduce using rule 60 (vector -> [ vector_body ] .)
    WHILE           reduce using rule 60 (vector -> [ vector_body ] .)
    FOR             reduce using rule 60 (vector -> [ vector_body ] .)
    BREAK           reduce using rule 60 (vector -> [ vector_body ] .)
    CONTINUE        reduce using rule 60 (vector -> [ vector_body ] .)
    RETURN          reduce using rule 60 (vector -> [ vector_body ] .)
    PRINT           reduce using rule 60 (vector -> [ vector_body ] .)
    ID              reduce using rule 60 (vector -> [ vector_body ] .)


state 123

    (63) vector_body -> vector_body , . numeric_expression
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 133
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 124

    (71) function -> function_name ( vector_body . )
    (63) vector_body -> vector_body . , numeric_expression

    )               shift and go to state 134
    ,               shift and go to state 123


state 125

    (72) function -> function_name ( error . )

    )               shift and go to state 135


state 126

    (25) print_body -> expression , print_body .

    ;               reduce using rule 25 (print_body -> expression , print_body .)


state 127

    (38) var -> var [ vector_body ] .

    [               reduce using rule 38 (var -> var [ vector_body ] .)
    =               reduce using rule 38 (var -> var [ vector_body ] .)
    ADDASSIGN       reduce using rule 38 (var -> var [ vector_body ] .)
    SUBASSIGN       reduce using rule 38 (var -> var [ vector_body ] .)
    MULASSIGN       reduce using rule 38 (var -> var [ vector_body ] .)
    DIVASSIGN       reduce using rule 38 (var -> var [ vector_body ] .)
    +               reduce using rule 38 (var -> var [ vector_body ] .)
    -               reduce using rule 38 (var -> var [ vector_body ] .)
    *               reduce using rule 38 (var -> var [ vector_body ] .)
    /               reduce using rule 38 (var -> var [ vector_body ] .)
    DOTADD          reduce using rule 38 (var -> var [ vector_body ] .)
    DOTSUB          reduce using rule 38 (var -> var [ vector_body ] .)
    DOTMUL          reduce using rule 38 (var -> var [ vector_body ] .)
    DOTDIV          reduce using rule 38 (var -> var [ vector_body ] .)
    <               reduce using rule 38 (var -> var [ vector_body ] .)
    >               reduce using rule 38 (var -> var [ vector_body ] .)
    EQUAL           reduce using rule 38 (var -> var [ vector_body ] .)
    NOTEQUAL        reduce using rule 38 (var -> var [ vector_body ] .)
    LE              reduce using rule 38 (var -> var [ vector_body ] .)
    GE              reduce using rule 38 (var -> var [ vector_body ] .)
    '               reduce using rule 38 (var -> var [ vector_body ] .)
    ;               reduce using rule 38 (var -> var [ vector_body ] .)
    ,               reduce using rule 38 (var -> var [ vector_body ] .)
    )               reduce using rule 38 (var -> var [ vector_body ] .)
    ]               reduce using rule 38 (var -> var [ vector_body ] .)
    :               reduce using rule 38 (var -> var [ vector_body ] .)
    error           reduce using rule 38 (var -> var [ vector_body ] .)
    {               reduce using rule 38 (var -> var [ vector_body ] .)
    IF              reduce using rule 38 (var -> var [ vector_body ] .)
    WHILE           reduce using rule 38 (var -> var [ vector_body ] .)
    FOR             reduce using rule 38 (var -> var [ vector_body ] .)
    BREAK           reduce using rule 38 (var -> var [ vector_body ] .)
    CONTINUE        reduce using rule 38 (var -> var [ vector_body ] .)
    RETURN          reduce using rule 38 (var -> var [ vector_body ] .)
    PRINT           reduce using rule 38 (var -> var [ vector_body ] .)
    ID              reduce using rule 38 (var -> var [ vector_body ] .)


state 128

    (42) array_range -> var [ numeric_expression , . numeric_expression ]
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    var                            shift and go to state 53
    numeric_expression             shift and go to state 136
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 129

    (10) conditional -> IF ( expression ) instruction .
    (11) conditional -> IF ( expression ) instruction . ELSE instruction

    error           reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    {               reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    IF              reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    WHILE           reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    FOR             reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    BREAK           reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    RETURN          reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    PRINT           reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    ID              reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    $end            reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    }               reduce using rule 10 (conditional -> IF ( expression ) instruction .)
    ELSE            shift and go to state 137

  ! ELSE            [ reduce using rule 10 (conditional -> IF ( expression ) instruction .) ]


state 130

    (14) while -> WHILE ( expression ) instruction .

    error           reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    {               reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    IF              reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    ID              reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    $end            reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    }               reduce using rule 14 (while -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 14 (while -> WHILE ( expression ) instruction .)


state 131

    (15) for -> FOR ID = numeric_expression : . numeric_expression instruction
    (45) numeric_expression -> . number
    (46) numeric_expression -> . matrix
    (47) numeric_expression -> . vector
    (48) numeric_expression -> . string
    (49) numeric_expression -> . unary_operation
    (50) numeric_expression -> . function
    (51) numeric_expression -> . ( numeric_expression )
    (52) numeric_expression -> . numeric_expression + numeric_expression
    (53) numeric_expression -> . numeric_expression - numeric_expression
    (54) numeric_expression -> . numeric_expression * numeric_expression
    (55) numeric_expression -> . numeric_expression / numeric_expression
    (56) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (57) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (58) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (59) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (39) number -> . INTNUM
    (40) number -> . FLOATNUM
    (41) number -> . var
    (64) matrix -> . [ matrix_body ]
    (60) vector -> . [ vector_body ]
    (61) vector -> . [ ]
    (27) string -> . STRING
    (67) unary_operation -> . negation
    (68) unary_operation -> . transposition
    (71) function -> . function_name ( vector_body )
    (72) function -> . function_name ( error )
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (69) negation -> . - numeric_expression
    (70) transposition -> . numeric_expression '
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    (               shift and go to state 90
    INTNUM          shift and go to state 51
    FLOATNUM        shift and go to state 52
    [               shift and go to state 54
    STRING          shift and go to state 55
    ID              shift and go to state 18
    -               shift and go to state 50
    EYE             shift and go to state 59
    ZEROS           shift and go to state 60
    ONES            shift and go to state 61

    numeric_expression             shift and go to state 138
    number                         shift and go to state 43
    matrix                         shift and go to state 44
    vector                         shift and go to state 45
    string                         shift and go to state 46
    unary_operation                shift and go to state 47
    function                       shift and go to state 48
    var                            shift and go to state 53
    negation                       shift and go to state 56
    transposition                  shift and go to state 57
    function_name                  shift and go to state 58

state 132

    (66) matrix_body -> matrix_body ; vector_body .
    (63) vector_body -> vector_body . , numeric_expression

    ]               reduce using rule 66 (matrix_body -> matrix_body ; vector_body .)
    ;               reduce using rule 66 (matrix_body -> matrix_body ; vector_body .)
    ,               shift and go to state 123


state 133

    (63) vector_body -> vector_body , numeric_expression .
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ]               reduce using rule 63 (vector_body -> vector_body , numeric_expression .)
    ,               reduce using rule 63 (vector_body -> vector_body , numeric_expression .)
    ;               reduce using rule 63 (vector_body -> vector_body , numeric_expression .)
    )               reduce using rule 63 (vector_body -> vector_body , numeric_expression .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 134

    (71) function -> function_name ( vector_body ) .

    +               reduce using rule 71 (function -> function_name ( vector_body ) .)
    -               reduce using rule 71 (function -> function_name ( vector_body ) .)
    *               reduce using rule 71 (function -> function_name ( vector_body ) .)
    /               reduce using rule 71 (function -> function_name ( vector_body ) .)
    DOTADD          reduce using rule 71 (function -> function_name ( vector_body ) .)
    DOTSUB          reduce using rule 71 (function -> function_name ( vector_body ) .)
    DOTMUL          reduce using rule 71 (function -> function_name ( vector_body ) .)
    DOTDIV          reduce using rule 71 (function -> function_name ( vector_body ) .)
    <               reduce using rule 71 (function -> function_name ( vector_body ) .)
    >               reduce using rule 71 (function -> function_name ( vector_body ) .)
    EQUAL           reduce using rule 71 (function -> function_name ( vector_body ) .)
    NOTEQUAL        reduce using rule 71 (function -> function_name ( vector_body ) .)
    LE              reduce using rule 71 (function -> function_name ( vector_body ) .)
    GE              reduce using rule 71 (function -> function_name ( vector_body ) .)
    '               reduce using rule 71 (function -> function_name ( vector_body ) .)
    ;               reduce using rule 71 (function -> function_name ( vector_body ) .)
    ,               reduce using rule 71 (function -> function_name ( vector_body ) .)
    )               reduce using rule 71 (function -> function_name ( vector_body ) .)
    ]               reduce using rule 71 (function -> function_name ( vector_body ) .)
    :               reduce using rule 71 (function -> function_name ( vector_body ) .)
    error           reduce using rule 71 (function -> function_name ( vector_body ) .)
    {               reduce using rule 71 (function -> function_name ( vector_body ) .)
    IF              reduce using rule 71 (function -> function_name ( vector_body ) .)
    WHILE           reduce using rule 71 (function -> function_name ( vector_body ) .)
    FOR             reduce using rule 71 (function -> function_name ( vector_body ) .)
    BREAK           reduce using rule 71 (function -> function_name ( vector_body ) .)
    CONTINUE        reduce using rule 71 (function -> function_name ( vector_body ) .)
    RETURN          reduce using rule 71 (function -> function_name ( vector_body ) .)
    PRINT           reduce using rule 71 (function -> function_name ( vector_body ) .)
    ID              reduce using rule 71 (function -> function_name ( vector_body ) .)


state 135

    (72) function -> function_name ( error ) .

    +               reduce using rule 72 (function -> function_name ( error ) .)
    -               reduce using rule 72 (function -> function_name ( error ) .)
    *               reduce using rule 72 (function -> function_name ( error ) .)
    /               reduce using rule 72 (function -> function_name ( error ) .)
    DOTADD          reduce using rule 72 (function -> function_name ( error ) .)
    DOTSUB          reduce using rule 72 (function -> function_name ( error ) .)
    DOTMUL          reduce using rule 72 (function -> function_name ( error ) .)
    DOTDIV          reduce using rule 72 (function -> function_name ( error ) .)
    <               reduce using rule 72 (function -> function_name ( error ) .)
    >               reduce using rule 72 (function -> function_name ( error ) .)
    EQUAL           reduce using rule 72 (function -> function_name ( error ) .)
    NOTEQUAL        reduce using rule 72 (function -> function_name ( error ) .)
    LE              reduce using rule 72 (function -> function_name ( error ) .)
    GE              reduce using rule 72 (function -> function_name ( error ) .)
    '               reduce using rule 72 (function -> function_name ( error ) .)
    ;               reduce using rule 72 (function -> function_name ( error ) .)
    ,               reduce using rule 72 (function -> function_name ( error ) .)
    )               reduce using rule 72 (function -> function_name ( error ) .)
    ]               reduce using rule 72 (function -> function_name ( error ) .)
    :               reduce using rule 72 (function -> function_name ( error ) .)
    error           reduce using rule 72 (function -> function_name ( error ) .)
    {               reduce using rule 72 (function -> function_name ( error ) .)
    IF              reduce using rule 72 (function -> function_name ( error ) .)
    WHILE           reduce using rule 72 (function -> function_name ( error ) .)
    FOR             reduce using rule 72 (function -> function_name ( error ) .)
    BREAK           reduce using rule 72 (function -> function_name ( error ) .)
    CONTINUE        reduce using rule 72 (function -> function_name ( error ) .)
    RETURN          reduce using rule 72 (function -> function_name ( error ) .)
    PRINT           reduce using rule 72 (function -> function_name ( error ) .)
    ID              reduce using rule 72 (function -> function_name ( error ) .)


state 136

    (42) array_range -> var [ numeric_expression , numeric_expression . ]
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '

    ]               shift and go to state 139
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86


state 137

    (11) conditional -> IF ( expression ) instruction ELSE . instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 140
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 138

    (15) for -> FOR ID = numeric_expression : numeric_expression . instruction
    (52) numeric_expression -> numeric_expression . + numeric_expression
    (53) numeric_expression -> numeric_expression . - numeric_expression
    (54) numeric_expression -> numeric_expression . * numeric_expression
    (55) numeric_expression -> numeric_expression . / numeric_expression
    (56) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (57) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (58) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (59) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (70) transposition -> numeric_expression . '
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (8) block -> . { instructions }
    (9) block -> . { error }
    (10) conditional -> . IF ( expression ) instruction
    (11) conditional -> . IF ( expression ) instruction ELSE instruction
    (12) loop -> . while
    (13) loop -> . for
    (16) statement -> . assignment
    (17) statement -> . flow_keyword
    (18) statement -> . return
    (19) statement -> . print
    (14) while -> . WHILE ( expression ) instruction
    (15) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (30) assignment -> . assignment_var assignment_operand expression
    (31) assignment -> . assignment_var = string
    (20) flow_keyword -> . BREAK
    (21) flow_keyword -> . CONTINUE
    (22) return -> . RETURN expression
    (23) return -> . RETURN
    (24) print -> . PRINT print_body
    (28) assignment_var -> . var
    (29) assignment_var -> . array_range
    (37) var -> . ID
    (38) var -> . var [ vector_body ]
    (42) array_range -> . var [ numeric_expression , numeric_expression ]

    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 76
    DOTSUB          shift and go to state 77
    DOTMUL          shift and go to state 78
    DOTDIV          shift and go to state 79
    '               shift and go to state 86
    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 141
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_var                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 139

    (42) array_range -> var [ numeric_expression , numeric_expression ] .

    =               reduce using rule 42 (array_range -> var [ numeric_expression , numeric_expression ] .)
    ADDASSIGN       reduce using rule 42 (array_range -> var [ numeric_expression , numeric_expression ] .)
    SUBASSIGN       reduce using rule 42 (array_range -> var [ numeric_expression , numeric_expression ] .)
    MULASSIGN       reduce using rule 42 (array_range -> var [ numeric_expression , numeric_expression ] .)
    DIVASSIGN       reduce using rule 42 (array_range -> var [ numeric_expression , numeric_expression ] .)


state 140

    (11) conditional -> IF ( expression ) instruction ELSE instruction .

    error           reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 11 (conditional -> IF ( expression ) instruction ELSE instruction .)


state 141

    (15) for -> FOR ID = numeric_expression : numeric_expression instruction .

    error           reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    {               reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    IF              reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    WHILE           reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    FOR             reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    BREAK           reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    CONTINUE        reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    RETURN          reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    PRINT           reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    ID              reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    $end            reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    }               reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    ELSE            reduce using rule 15 (for -> FOR ID = numeric_expression : numeric_expression instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ] in state 94 resolved as shift
WARNING: shift/reduce conflict for , in state 99 resolved as shift
